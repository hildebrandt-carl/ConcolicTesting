; ModuleID = 'llvm-link'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [14 x i8] c"Enter input: \00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"Program output: %ld\0A\00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"[error] Error: Execution error, code: %ld\0A\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"Error: missing main function\0A\00", align 1
@.str.5 = private unnamed_addr constant [32 x i8] c"expected %ld integer arguments\0A\00", align 1
@_tip_num_inputs = constant i64 0
@_tip_input_array = common global [0 x i64] zeroinitializer
@.str.6 = private unnamed_addr constant [10 x i8] c"%s: True\0A\00", align 1
@.str.1.7 = private unnamed_addr constant [11 x i8] c"%s: False\0A\00", align 1
@.str.2.8 = private unnamed_addr constant [25 x i8] c"-----------------------\0A\00", align 1
@.str.3.9 = private unnamed_addr constant [8 x i8] c"%s: %s\0A\00", align 1
@.str.4.10 = private unnamed_addr constant [8 x i8] c"%s: %d\0A\00", align 1
@.str.5.11 = private unnamed_addr constant [9 x i8] c"%s: %ld\0A\00", align 1
@.str.6.12 = private unnamed_addr constant [8 x i8] c"%s: %f\0A\00", align 1
@0 = private unnamed_addr constant [15 x i8] c"Constraint Hit\00"
@1 = private unnamed_addr constant [7 x i8] c"a1 > 2\00"
@2 = private unnamed_addr constant [13 x i8] c"Operand (a1)\00"
@3 = private unnamed_addr constant [12 x i8] c"Operand (2)\00"
@4 = private unnamed_addr constant [15 x i8] c"Constraint Hit\00"
@5 = private unnamed_addr constant [11 x i8] c"gttmp != 0\00"
@6 = private unnamed_addr constant [21 x i8] c"Predicate Evaluation\00"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @_tip_input() #0 {
  %1 = alloca i64, align 8
  %2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0))
  %3 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i64* %1)
  %4 = load i64, i64* %1, align 8
  ret i64 %4
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @__isoc99_scanf(i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @_tip_output(i64) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i32 0, i32 0), i64 %3)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @_tip_error(i64) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.3, i32 0, i32 0), i64 %3)
  call void @exit(i32 -1) #5
  unreachable
                                                  ; No predecessors!
  ret void
}

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @_tip_main_undefined() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i32 0, i32 0))
  call void @exit(i32 -1) #5
  unreachable
                                                  ; No predecessors!
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32, i8**) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %8 = load i32, i32* %4, align 4
  %9 = sext i32 %8 to i64
  %10 = load i64, i64* @_tip_num_inputs, align 8
  %11 = add nsw i64 %10, 1
  %12 = icmp ne i64 %9, %11
  br i1 %12, label %13, label %16

; <label>:13:                                     ; preds = %2
  %14 = load i64, i64* @_tip_num_inputs, align 8
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i32 0, i32 0), i64 %14)
  call void @exit(i32 -1) #5
  unreachable

; <label>:16:                                     ; preds = %2
  store i64 0, i64* %7, align 8
  br label %17

; <label>:17:                                     ; preds = %30, %16
  %18 = load i64, i64* %7, align 8
  %19 = load i64, i64* @_tip_num_inputs, align 8
  %20 = icmp ult i64 %18, %19
  br i1 %20, label %21, label %33

; <label>:21:                                     ; preds = %17
  %22 = load i8**, i8*** %5, align 8
  %23 = load i64, i64* %7, align 8
  %24 = add i64 %23, 1
  %25 = getelementptr inbounds i8*, i8** %22, i64 %24
  %26 = load i8*, i8** %25, align 8
  %27 = call i64 @strtoll(i8* %26, i8** %6, i32 10) #6
  %28 = load i64, i64* %7, align 8
  %29 = getelementptr inbounds [0 x i64], [0 x i64]* @_tip_input_array, i64 0, i64 %28
  store i64 %27, i64* %29, align 8
  br label %30

; <label>:30:                                     ; preds = %21
  %31 = load i64, i64* %7, align 8
  %32 = add i64 %31, 1
  store i64 %32, i64* %7, align 8
  br label %17

; <label>:33:                                     ; preds = %17
  %34 = call i64 (...) bitcast (i64 ()* @_tip_main to i64 (...)*)()
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i32 0, i32 0), i64 %34)
  ret i32 0
}

; Function Attrs: nounwind
declare dso_local i64 @strtoll(i8*, i8**, i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_boolean(i8*, i1 zeroext) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8, align 1
  store i8* %0, i8** %3, align 8
  %5 = zext i1 %1 to i8
  store i8 %5, i8* %4, align 1
  %6 = load i8, i8* %4, align 1
  %7 = trunc i8 %6 to i1
  %8 = zext i1 %7 to i32
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %13

; <label>:10:                                     ; preds = %2
  %11 = load i8*, i8** %3, align 8
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), i8* %11)
  br label %16

; <label>:13:                                     ; preds = %2
  %14 = load i8*, i8** %3, align 8
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1.7, i32 0, i32 0), i8* %14)
  br label %16

; <label>:16:                                     ; preds = %13, %10
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2.8, i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_string(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i8*, i8** %3, align 8
  %6 = load i8*, i8** %4, align 8
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3.9, i32 0, i32 0), i8* %5, i8* %6)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_i32(i8*, i32) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  store i32 %1, i32* %4, align 4
  %5 = load i8*, i8** %3, align 8
  %6 = load i32, i32* %4, align 4
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4.10, i32 0, i32 0), i8* %5, i32 %6)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_i64(i8*, i64) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i8*, i8** %3, align 8
  %6 = load i64, i64* %4, align 8
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5.11, i32 0, i32 0), i8* %5, i64 %6)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_float(i8*, float) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca float, align 4
  store i8* %0, i8** %3, align 8
  store float %1, float* %4, align 4
  %5 = load i8*, i8** %3, align 8
  %6 = load float, float* %4, align 4
  %7 = fpext float %6 to double
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.12, i32 0, i32 0), i8* %5, double %7)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_double(i8*, double) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca double, align 8
  store i8* %0, i8** %3, align 8
  store double %1, double* %4, align 8
  %5 = load i8*, i8** %3, align 8
  %6 = load double, double* %4, align 8
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.12, i32 0, i32 0), i8* %5, double %6)
  ret void
}

define i64 @_tip_main() {
entry:
  %a = alloca i64
  store i64 0, i64* %a
  %a1 = load i64, i64* %a
  call void @print_string(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @0, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i32 0, i32 0))
  call void @print_i64(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @2, i32 0, i32 0), i64 %a1)
  call void @print_i64(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @3, i32 0, i32 0), i64 2)
  %gttmp = icmp sgt i64 %a1, 2
  call void @print_string(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @4, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @5, i32 0, i32 0))
  %ifcond = icmp ne i1 %gttmp, false
  call void @print_boolean(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @6, i32 0, i32 0), i1 %ifcond)
  br i1 %ifcond, label %then1, label %else1

then1:                                            ; preds = %entry
  store i64 1, i64* %a
  br label %ifmerge1

else1:                                            ; preds = %entry
  call void @llvm.donothing()
  br label %ifmerge1

ifmerge1:                                         ; preds = %else1, %then1
  call void @llvm.donothing()
  %a2 = load i64, i64* %a
  ret i64 %a2
}

; Function Attrs: nounwind readnone
declare void @llvm.donothing() #4

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { noreturn nounwind }
attributes #6 = { nounwind }

!llvm.ident = !{!0, !0}
!llvm.module.flags = !{!1}

!0 = !{!"clang version 7.0.1 (tags/RELEASE_701/final)"}
!1 = !{i32 1, !"wchar_size", i32 4}
