# include <stdio.h>

int add(int num1, int num2);

int main()
{
	int a = 1 ;
	int b = 2 ;
	int c ;
	c = add(a,b) ;
	return -1 ;
}

int add(int num1, int num2)
{Compiling: test_example.c
Running Dynamic Pass on: test_example.bc
===========================================================

Generating Constraints

Instruction (alloca) 	:   %retval = alloca i32, align 4
Instruction (alloca) 	:   %a = alloca i32, align 4
Instruction (alloca) 	:   %b = alloca i32, align 4
Instruction (alloca) 	:   %c = alloca i32, align 4
Instruction (store) 	:   store i32 0, i32* %retval, align 4
Instruction (store) 	:   store i32 1, i32* %a, align 4
Instruction (store) 	:   store i32 2, i32* %b, align 4
Instruction (load) 	:   %0 = load i32, i32* %a, align 4
Instruction (load) 	:   %1 = load i32, i32* %b, align 4
Instruction (call) 	:   %call = call i32 @add(i32 %0, i32 %1)
Instruction (store) 	:   store i32 %call, i32* %c, align 4
Instruction (ret) 	:   ret i32 -1
Instruction (alloca) 	:   %num1.addr = alloca i32, align 4
Instruction (alloca) 	:   %num2.addr = alloca i32, align 4
Instruction (alloca) 	:   %result = alloca i32, align 4
Instruction (store) 	:   store i32 %num1, i32* %num1.addr, align 4
Instruction (store) 	:   store i32 %num2, i32* %num2.addr, align 4
Instruction (load) 	:   %0 = load i32, i32* %num1.addr, align 4
Instruction (load) 	:   %1 = load i32, i32* %num2.addr, align 4
Instruction (add) 	:   %add = add nsw i32 %0, %1
Instruction (store) 	:   store i32 %add, i32* %result, align 4
Instruction (load) 	:   %2 = load i32, i32* %result, align 4
Instruction (icmp) 	:   %cmp = icmp sgt i32 %2, 10
Instruction (br) 	:   br i1 %cmp, label %if.then, label %if.end
Instruction (store) 	:   store i32 5, i32* %result, align 4
Instruction (br) 	:   br label %if.end
Instruction (load) 	:   %3 = load i32, i32* %result, align 4
Instruction (ret) 	:   ret i32 %3

===========================================================
Compiling: auxilary logging functions
Linking to auxilary logging functions
Displaying new program auxilary with logging functions
===========================================================

Instruction (alloca) 	:   %3 = alloca i8*, align 8
Instruction (alloca) 	:   %4 = alloca i8, align 1
Instruction (store) 	:   store i8* %0, i8** %3, align 8
Instruction (zext) 	:   %5 = zext i1 %1 to i8
Instruction (store) 	:   store i8 %5, i8* %4, align 1
Instruction (load) 	:   %6 = load i8, i8* %4, align 1
Instruction (trunc) 	:   %7 = trunc i8 %6 to i1
Instruction (zext) 	:   %8 = zext i1 %7 to i32
Instruction (icmp) 	:   %9 = icmp eq i32 %8, 1
Instruction (br) 	:   br i1 %9, label %10, label %13
Instruction (load) 	:   %11 = load i8*, i8** %3, align 8
Instruction (call) 	:   %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), i8* %11)
Instruction (br) 	:   br label %16
Instruction (load) 	:   %14 = load i8*, i8** %3, align 8
Instruction (call) 	:   %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i32 0, i32 0), i8* %14)
Instruction (br) 	:   br label %16
Instruction (call) 	:   %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i32 0, i32 0))
Instruction (ret) 	:   ret void
Instruction (alloca) 	:   %3 = alloca i8*, align 8
Instruction (alloca) 	:   %4 = alloca i8*, align 8
Instruction (store) 	:   store i8* %0, i8** %3, align 8
Instruction (store) 	:   store i8* %1, i8** %4, align 8
Instruction (load) 	:   %5 = load i8*, i8** %3, align 8
Instruction (load) 	:   %6 = load i8*, i8** %4, align 8
Instruction (call) 	:   %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i8* %5, i8* %6)
Instruction (ret) 	:   ret void
Instruction (alloca) 	:   %3 = alloca i8*, align 8
Instruction (alloca) 	:   %4 = alloca i32, align 4
Instruction (store) 	:   store i8* %0, i8** %3, align 8
Instruction (store) 	:   store i32 %1, i32* %4, align 4
Instruction (load) 	:   %5 = load i8*, i8** %3, align 8
Instruction (load) 	:   %6 = load i32, i32* %4, align 4
Instruction (call) 	:   %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), i8* %5, i32 %6)
Instruction (ret) 	:   ret void
Instruction (alloca) 	:   %3 = alloca i8*, align 8
Instruction (alloca) 	:   %4 = alloca i64, align 8
Instruction (store) 	:   store i8* %0, i8** %3, align 8
Instruction (store) 	:   store i64 %1, i64* %4, align 8
Instruction (load) 	:   %5 = load i8*, i8** %3, align 8
Instruction (load) 	:   %6 = load i64, i64* %4, align 8
Instruction (call) 	:   %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i32 0, i32 0), i8* %5, i64 %6)
Instruction (ret) 	:   ret void
Instruction (alloca) 	:   %3 = alloca i8*, align 8
Instruction (alloca) 	:   %4 = alloca float, align 4
Instruction (store) 	:   store i8* %0, i8** %3, align 8
Instruction (store) 	:   store float %1, float* %4, align 4
Instruction (load) 	:   %5 = load i8*, i8** %3, align 8
Instruction (load) 	:   %6 = load float, float* %4, align 4
Instruction (fpext) 	:   %7 = fpext float %6 to double
Instruction (call) 	:   %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), i8* %5, double %7)
Instruction (ret) 	:   ret void
Instruction (alloca) 	:   %3 = alloca i8*, align 8
Instruction (alloca) 	:   %4 = alloca double, align 8
Instruction (store) 	:   store i8* %0, i8** %3, align 8
Instruction (store) 	:   store double %1, double* %4, align 8
Instruction (load) 	:   %5 = load i8*, i8** %3, align 8
Instruction (load) 	:   %6 = load double, double* %4, align 8
Instruction (call) 	:   %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), i8* %5, double %6)
Instruction (ret) 	:   ret void
Instruction (alloca) 	:   %retval = alloca i32, align 4
Instruction (alloca) 	:   %a = alloca i32, align 4
Instruction (alloca) 	:   %b = alloca i32, align 4
Instruction (alloca) 	:   %c = alloca i32, align 4
Instruction (store) 	:   store i32 0, i32* %retval, align 4
Instruction (store) 	:   store i32 1, i32* %a, align 4
Instruction (store) 	:   store i32 2, i32* %b, align 4
Instruction (load) 	:   %0 = load i32, i32* %a, align 4
Instruction (load) 	:   %1 = load i32, i32* %b, align 4
Instruction (call) 	:   %call = call i32 @add(i32 %0, i32 %1)
Instruction (store) 	:   store i32 %call, i32* %c, align 4
Instruction (ret) 	:   ret i32 -1
Instruction (alloca) 	:   %num1.addr = alloca i32, align 4
Instruction (alloca) 	:   %num2.addr = alloca i32, align 4
Instruction (alloca) 	:   %result = alloca i32, align 4
Instruction (store) 	:   store i32 %num1, i32* %num1.addr, align 4
Instruction (store) 	:   store i32 %num2, i32* %num2.addr, align 4
Instruction (load) 	:   %0 = load i32, i32* %num1.addr, align 4
Instruction (load) 	:   %1 = load i32, i32* %num2.addr, align 4
Instruction (add) 	:   %add = add nsw i32 %0, %1
Instruction (store) 	:   store i32 %add, i32* %result, align 4
Instruction (load) 	:   %2 = load i32, i32* %result, align 4
Instruction (call) 	:   call void @print_string(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @0, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1, i32 0, i32 0))
Instruction (call) 	:   call void @print_i32(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @2, i32 0, i32 0), i32 %2)
Instruction (call) 	:   call void @print_i32(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @3, i32 0, i32 0), i32 10)
Instruction (icmp) 	:   %cmp = icmp sgt i32 %2, 10
Instruction (call) 	:   call void @print_boolean(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @4, i32 0, i32 0), i1 %cmp)
Instruction (br) 	:   br i1 %cmp, label %if.then, label %if.end
Instruction (store) 	:   store i32 5, i32* %result, align 4
Instruction (br) 	:   br label %if.end
Instruction (load) 	:   %3 = load i32, i32* %result, align 4
Instruction (ret) 	:   ret i32 %3

===========================================================
Running instrumented code
===========================================================

Constraint Hit: result > 10
Operand (result): 3
Operand (10): 10
Predicate Evaluation: False
-----------------------
	int result ;
	result = num1 + num2 ; 
	if (result > 10)
	{
		result = 5 ;
	}
	return result ;
}
